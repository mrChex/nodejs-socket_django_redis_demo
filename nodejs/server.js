// Generated by CoffeeScript 1.6.3
(function() {
  var client, client2, cookie_reader, http, io, querystring, redis;

  io = require('socket.io').listen(8080);

  cookie_reader = require('cookie');

  querystring = require('querystring');

  http = require('http');

  redis = require('redis');

  client = redis.createClient();

  client2 = redis.createClient();

  io.configure(function() {
    io.set('authorization', function(data, accept) {
      console.log("HANDSHAKE::xdomain", data['xdomain']);
      if (data.headers.cookie) {
        data.cookie = cookie_reader.parse(data.headers.cookie);
        return accept(null, true);
      }
      return accept('Cookies not defined!', false);
    });
    return io.set('log level', 1);
  });

  io.sockets.on('connection', function(socket) {
    var time;
    time = (new Date).toLocaleTimeString();
    socket.get_session_data = function(callback) {
      return client2.get("DJANGO_SESSION::" + socket.handshake.cookie['sessionid'], function(err, reply) {
        return callback(JSON.parse(reply));
      });
    };
    socket.on('get_secret', function(fn) {
      return socket.get_session_data(function(data) {
        return fn(data['secret_randomint']);
      });
    });
    return socket.on('send', function(options, fn) {
      var cookie, csrftoken, data, method, req, sessionid, url, values;
      method = options['method'] ? options['method'] : 'get';
      url = options['url'];
      data = options['data'];
      csrftoken = options['csrftoken'] ? options['csrftoken'] : socket.handshake.cookie['csrftoken'];
      sessionid = socket.handshake.cookie['sessionid'];
      values = querystring.stringify(data);
      cookie = "sessionid=" + sessionid + "; csrftoken=" + csrftoken;
      options = {
        host: "127.0.0.1",
        port: 8000,
        path: url,
        method: method,
        headers: {
          'Cookie': cookie,
          'X-CSRFToken': csrftoken,
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Length': values.length
        }
      };
      if (method === 'GET' || method === 'get') {
        options['headers']['Content-Type'] = 'application/json';
      } else {
        options['headers']['Content-Type'] = 'application/x-www-form-urlencoded';
      }
      req = http.request(options, function(res) {
        res.setEncoding('utf8');
        res.message = "";
        console.log(JSON.stringify(res.headers));
        res.on('data', function(chunk) {
          return res.message += chunk.toString();
        });
        return res.on('end', function() {
          var err;
          try {
            data = JSON.parse(res.message);
            return fn(data, false);
          } catch (_error) {
            err = _error;
            console.log("DJANGO! ITS FUCKING NOT JSON!!!: ", res.message);
            return fn(false, true);
          }
        });
      });
      req.on('error', function(e) {
        console.log("DJANGO::CONNECTOR", e.message);
        return fn(false, true);
      });
      req.write(values);
      return req.end();
    });
  });

  client.on("message", function(channel, message) {
    console.log("REDIS", "Chanel: " + channel + ", message: " + message);
    return io.sockets.emit('django_message', message);
  });

  client.subscribe("nodejs");

}).call(this);
